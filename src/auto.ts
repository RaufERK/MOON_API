/**
 * ‚ñ∏ 01-01-curr 00:00 –ú–°–ö, –¥–∞–ª–µ–µ –¥–æ 31-12 12:00 –ú–°–ö
 * ‚ñ∏ –°—á–∏—Ç–∞–µ—Ç –∑–Ω–∞–∫ –õ—É–Ω—ã –∏ –°–æ–ª–Ω—Ü–∞, –¥–≤–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª–Ω–æ–ª—É–Ω–∏—è
 * ‚ñ∏ –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é MoonData
 * ‚ñ∏ –ü–µ—á–∞—Ç–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É ¬´–¥–µ–Ω—å ‚Äî –ª—É–Ω–∞ ¬∑ —Å–æ–ª–Ω—Ü–µ |  fracSC / fracAstro¬ª
 */

import { julian, moonposition, solar } from 'astronomia';
import { connect, disconnect } from 'mongoose';
import { DateTime } from 'luxon';
import 'dotenv/config';

import { MoonData } from './MoonData.model.js';
import { zodiacArray } from './zodiacArray.js';

const MSK = 'Europe/Moscow';
const fullMoonFactor = 0.04;

const yearDuration = 1; // 1 = —Ç–µ–∫—É—â–∏–π –≥–æ–¥; 2 = + —Å–ª–µ–¥—É—é—â–∏–π

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

const rad2deg = (r: number) => (r * 180) / Math.PI;
const toSign = (deg: number) => Math.floor(((deg + 90 + 360) % 360) / 30); // 0 = Cap

/** JD –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —á–∞—Å–∞ */
const jdMsk = (dt: DateTime, hr: number) => {
  const utc = dt.set({ hour: hr, minute: 0, second: 0 }).toUTC();
  return (
    julian.CalendarGregorianToJD(utc.year, utc.month, utc.day) + utc.hour / 24
  );
};

/** elongation Sun‚ÄìMoon ‚Üí –æ—Å–≤–µ—â—ë–Ω–Ω–∞—è –¥–æ–ª—è */
function illuminFracAstro(jd: number): number {
  const sunEq = solar.apparentEquatorial(jd); // ra, dec   (—Ä–∞–¥)
  const moonEq = moonposition.position(jd); // ra, dec ‚Ä¶

  const cosœà =
    Math.sin(moonEq.dec) * Math.sin(sunEq.dec) +
    Math.cos(moonEq.dec) * Math.cos(sunEq.dec) * Math.cos(moonEq.ra - sunEq.ra);

  const frac = (1 + Math.max(-1, Math.min(1, cosœà))) / 2; // clamp
  return frac;
}

/** 01-01-curr ‚Üí 31-12-curr (–∏–ª–∏ +yearDuration-1) */
function* daysRange() {
  const y = DateTime.now().setZone(MSK).year;
  let d = DateTime.fromObject({ year: y, month: 1, day: 1 }, { zone: MSK });
  const end = d.plus({ years: yearDuration }).minus({ days: 1 });
  while (d <= end) {
    yield d;
    d = d.plus({ days: 1 });
  }
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

void (async () => {
  if (!process.env.mongoUrl) {
    console.error('‚ùå  mongoUrl –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env');
    process.exit(1);
  }
  await connect(process.env.mongoUrl);
  console.log('‚úÖ  MongoDB connected');

  const bulk: any[] = [];

  for (const dMsk of daysRange()) {
    const hr = dMsk.day === 1 && dMsk.month === 1 ? 0 : 12;
    const jd = jdMsk(dMsk, hr);

    /* –õ—É–Ω–∞ */
    const moonSign = toSign(rad2deg(moonposition.position(jd).lon));

    /* –°–æ–ª–Ω—Ü–µ ‚Äì —ç–∫–ª–∏–ø—Ç–∏—á–µ—Å–∫–∞—è –¥–æ–ª–≥–æ—Ç–∞ Œª‚äô */
    const sunSign = toSign(rad2deg(solar.apparentLongitude(jd)));

    const fractionAstro = illuminFracAstro(jd);

    bulk.push({
      date: dMsk.toFormat('dd.MM.yyyy'),
      moonZodiac: moonSign,
      sunZodiac: sunSign,
      fullmoon: fractionAstro < fullMoonFactor,
    });
  }

  /* –∑–∞–ø–∏—Å—å –≤ –ë–î */
  await MoonData.deleteMany({});
  await MoonData.insertMany(bulk);
  console.log(`üîÑ  –ó–∞–ø–∏—Å–∞–Ω–æ ${bulk.length} —Å—Ç—Ä–æ–∫.`);

  /* –≤—ã–≤–æ–¥ */

  const thisYear = DateTime.now().year;
  console.log(`\nüóì  ${thisYear} –≥–æ–¥ (12:00 –ú–°–ö, 01-01 ‚Äî 00:00)\n`);
  bulk
    .filter((r) => r.date.endsWith(`.${thisYear}`))
    .forEach((r) => {
      console.log(
        `${r.date} ‚Äî ${zodiacArray[r.moonZodiac]} ¬∑ ${zodiacArray[r.sunZodiac]} | ${r.fullmoon ? `‚úÖ` : `‚ùå`} `,
      );
    });

  await disconnect();
  console.log('\nüîå  MongoDB disconnected.');
})();
