/**
 * ‚ñ∏ –°—á–∏—Ç–∞–µ—Ç –∑–Ω–∞–∫ –õ—É–Ω—ã –∏ –°–æ–ª–Ω—Ü–∞ –¥–ª—è 12 —á –ú–°–ö –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
 *   (0 —á –ú–°–ö —Ç–æ–ª—å–∫–æ 01-01 —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞).
 * ‚ñ∏ –î–∏–∞–ø–∞–∑–æ–Ω: 01-01-curr ‚Üí 31-12-next  (730 —Å—É—Ç–æ–∫).
 * ‚ñ∏ –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é MoonData.
 * ‚ñ∏ –ü–µ—á–∞—Ç–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥.
 */

import { julian, moonposition, solar } from 'astronomia';
import { connect, disconnect } from 'mongoose';
import { DateTime } from 'luxon';
import SunCalc from 'suncalc';
import 'dotenv/config';

import { MoonData } from './MoonData.model.js';
import { zodiacArray } from './zodiacArray.js';

const MSK = 'Europe/Moscow';
const fullMoonFactor = 0.98;
const yearDuration = 1;

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

const rad2deg = (r: number) => (r * 180) / Math.PI;
/** ecliptic-longitude [deg] ‚áí –Ω–æ–º–µ—Ä –∑–Ω–∞–∫–∞ (0 = –ö–æ–∑–µ—Ä–æ–≥) */
const toSign = (Œªdeg: number) => Math.floor(((Œªdeg + 90) % 360) / 30);

/** —é–ª–∏–∞–Ω—Å–∫–∏–π –¥–µ–Ω—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ *–º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ* —á–∞—Å–∞ (UTC —Å—á—ë—Ç —Å–¥–µ–ª–∞–µ–º —Å–∞–º–∏) */
function jdMsk(dtMsk: DateTime, hourMsk: number): number {
  const utc = dtMsk.set({ hour: hourMsk, minute: 0, second: 0 }).toUTC();
  return (
    julian.CalendarGregorianToJD(utc.year, utc.month, utc.day) + utc.hour / 24
  );
}

/** –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä: 01 —è–Ω–≤ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ ‚Üí 31 –¥–µ–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ */
function* daysTwoYears() {
  const y = DateTime.now().setZone(MSK).year;
  let d = DateTime.fromObject({ year: y, month: 1, day: 1 }, { zone: MSK });
  const last = d.plus({ years: yearDuration }).minus({ days: 1 });
  while (d <= last) {
    yield d;
    d = d.plus({ days: 1 });
  }
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

void (async () => {
  const mongoUrl = process.env.mongoUrl;
  if (!mongoUrl) {
    console.error('‚ùå  mongoUrl –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env');
    process.exit(1);
  }

  await connect(mongoUrl);
  console.log('‚úÖ  MongoDB connected');

  const docs: any[] = [];

  for (const dMsk of daysTwoYears()) {
    // 01-01 ‚Äì –±–µ—Ä—ë–º 00:00 –ú–°–ö, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äì 12:00 –ú–°–ö
    const hour = dMsk.day === 1 && dMsk.month === 1 ? 0 : 12;
    const jd = jdMsk(dMsk, hour);

    /* –õ—É–Ω–∞ */
    const Œªmoon = rad2deg(moonposition.position(jd).lon);
    const moonSign = toSign(Œªmoon);

    /* –°–æ–ª–Ω—Ü–µ ‚Äì –≥–µ–æ—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∞—è –≤–∏–¥–∏–º–∞—è –¥–æ–ª–≥–æ—Ç–∞ (–±–µ–∑ +œÄ !) */
    const Œªsun = rad2deg(solar.apparentLongitude(jd));
    const sunSign = toSign(Œªsun);

    console.log(dMsk.toFormat('dd.MM.yyyy'), Œªmoon, moonSign, Œªsun, sunSign);

    /* —Ñ–∞–∑–∞ –õ—É–Ω—ã –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è */
    const { fraction } = SunCalc.getMoonIllumination(
      dMsk.set({ hour }).toUTC().toJSDate(),
    );

    docs.push({
      date: dMsk.toFormat('dd.MM.yyyy'),
      moonZodiac: moonSign,
      sunZodiac: sunSign,
      fullmoon: fraction > fullMoonFactor,
    });
  }

  // console.log(`üîÑ  –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é (—Å—Ç—Ä–æ–∫: ${docs.length})`);
  // await MoonData.deleteMany({});
  // await MoonData.insertMany(docs);

  // /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–µ—á–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  // const y = DateTime.now().setZone(MSK).year;
  // console.log(`\nüóì  ${y} –≥–æ–¥ (12:00 –ú–°–ö, 01-01 ‚Äî 00:00):\n`);
  // docs
  //   .filter((r) => r.date.endsWith(`.${y}`))
  //   .forEach((r) =>
  //     console.log(
  //       `${r.date} ‚Äî ${zodiacArray[r.moonZodiac]}  ¬∑  ${zodiacArray[r.sunZodiac]}`,
  //     ),
  //   );

  await disconnect();
  console.log('\nüîå  MongoDB disconnected. –ì–æ—Ç–æ–≤–æ.');
})();
