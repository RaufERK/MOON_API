/**
 * ‚ñ∏ 01-01-curr –≤ 00:00 –ú–°–ö, –¥–∞–ª–µ–µ –¥–æ 31-12-curr –≤ 12:00 –ú–°–ö
 * ‚ñ∏ –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç MoonData –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –∑–Ω–∞–∫ –õ—É–Ω—ã / –°–æ–ª–Ω—Ü–∞ –∑–∞ –≥–æ–¥.
 */

import { julian, moonposition, solar } from 'astronomia';
import { connect, disconnect } from 'mongoose';
import { DateTime } from 'luxon';
import SunCalc from 'suncalc';
import 'dotenv/config';

import { MoonData } from './MoonData.model.js';
import { zodiacArray } from './zodiacArray.js';

const MSK = 'Europe/Moscow';
const fullMoonFactor = 0.98;

/* ‚îÄ helpers ‚îÄ */

const rad2deg = (r: number) => (r * 180) / Math.PI;
/** –¥–æ–ª–≥–æ—Ç–∞/RA ¬∞ ‚Üí ‚Ññ –∑–Ω–∞–∫–∞ (0 = Cap) */
const toSign = (deg: number) => Math.floor(((deg + 90 + 360) % 360) / 30);

/** JD –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —á–∞—Å–∞ */
function jdMsk(dt: DateTime, hour: number) {
  const utc = dt.set({ hour, minute: 0, second: 0 }).toUTC();
  return (
    julian.CalendarGregorianToJD(utc.year, utc.month, utc.day) + utc.hour / 24
  );
}

/** 01-01-curr ‚Üí 31-12-curr */
function* daysCurrentYear() {
  const y = DateTime.now().setZone(MSK).year;
  let d = DateTime.fromObject({ year: y, month: 1, day: 1 }, { zone: MSK });
  const end = d.endOf('year');
  while (d <= end) {
    yield d;
    d = d.plus({ days: 1 });
  }
}

/* ‚îÄ main ‚îÄ */

void (async () => {
  if (!process.env.mongoUrl) {
    console.error('‚ùå  mongoUrl –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env');
    process.exit(1);
  }
  await connect(process.env.mongoUrl);
  console.log('‚úÖ  MongoDB connected');

  const rows: any[] = [];

  for (const dMsk of daysCurrentYear()) {
    const hour = dMsk.day === 1 && dMsk.month === 1 ? 0 : 12;
    const jd = jdMsk(dMsk, hour);

    // –õ—É–Ω–∞
    const moonSign = toSign(rad2deg(moonposition.position(jd).lon));

    // –°–æ–ª–Ω—Ü–µ ‚Äì –±–µ—Ä—ë–º RA (–∞–ø–ø. —ç–∫–≤–∞—Ç–æ—Ä. –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
    const sunRAdeg = rad2deg(solar.apparentEquatorial(jd).ra);
    const sunSign = toSign(sunRAdeg);

    // –§–∞–∑–∞ –õ—É–Ω—ã
    const { fraction } = SunCalc.getMoonIllumination(
      dMsk.set({ hour }).toUTC().toJSDate(),
    );

    rows.push({
      date: dMsk.toFormat('dd.MM.yyyy'),
      moonZodiac: moonSign,
      sunZodiac: sunSign,
      fullmoon: fraction > fullMoonFactor,
    });
  }

  /* –∑–∞–ø–∏—Å—å –≤ –ë–î */
  await MoonData.deleteMany({});
  await MoonData.insertMany(rows);
  console.log(`üîÑ  –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫.`);

  /* –≤—ã–≤–æ–¥ */
  console.log(`\nüóì  ${DateTime.now().year} (12:00 –ú–°–ö, 01-01 ‚Äî 00:00)\n`);
  rows.forEach((r) =>
    console.log(
      `${r.date} ‚Äî ${zodiacArray[r.moonZodiac]}  ¬∑  ${zodiacArray[r.sunZodiac]}`,
    ),
  );

  await disconnect();
  console.log('\nüîå  MongoDB disconnected.');
})();
